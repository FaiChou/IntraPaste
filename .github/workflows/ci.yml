name: Build & Deploy Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'ios/**'
      - 'README_zh.md'
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'ios/**'
      - 'README_zh.md'
      - 'README.md'

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/intrapaste

jobs:
  lint-and-test:
    name: Code Check and Test
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run ESLint
        run: npm run lint

      - name: Run type check
        run: npm run typecheck

      - name: Build test
        run: npm run build
        env:
          MINIO_ENDPOINT: 'http://localhost'
          MINIO_PORT: '9000'
          MINIO_ROOT_USER: 'test'
          MINIO_ROOT_PASSWORD: 'test'

  docker-build-push:
    name: Build and Push Docker Image
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci') && github.event_name == 'push' && github.ref == 'refs/heads/main'"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Copy environment file
        run: cp .env.example .env
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ steps.package-version.outputs.version }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
